{
  "id": "tree-view",
  "name": "Tree View",
  "variants": [
    {
      "file": "styled/tree-view.tsx",
      "content": "'use client'\nimport type { Assign } from '@ark-ui/react'\nimport { type TreeNode, TreeView } from '@ark-ui/react/tree-view'\nimport { type TreeViewVariantProps, treeView } from 'styled-system/recipes'\nimport type { ComponentProps, HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from './utils/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(treeView)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  HTMLDivElement,\n  Assign<\n    Assign<HTMLStyledProps<'div'>, TreeView.RootProviderBaseProps<TreeNode>>,\n    TreeViewVariantProps\n  >\n>(TreeView.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  HTMLDivElement,\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootBaseProps<TreeNode>>, TreeViewVariantProps>\n>(TreeView.Root, 'root')\n\nexport const BranchContent = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchContentBaseProps>\n>(TreeView.BranchContent, 'branchContent')\n\nexport const BranchControl = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchControlBaseProps>\n>(TreeView.BranchControl, 'branchControl')\n\nexport const BranchIndicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndicatorBaseProps>\n>(TreeView.BranchIndicator, 'branchIndicator')\n\nexport const Branch = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchBaseProps>\n>(TreeView.Branch, 'branch')\n\nexport const BranchText = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, TreeView.BranchTextBaseProps>\n>(TreeView.BranchText, 'branchText')\n\nexport const BranchIndentGuide = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndentGuideBaseProps>\n>(TreeView.BranchIndentGuide, 'branchIndentGuide')\n\nexport const BranchTrigger = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchTriggerBaseProps>\n>(TreeView.BranchTrigger, 'branchTrigger')\n\nexport const ItemIndicator = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.ItemIndicatorBaseProps>\n>(TreeView.ItemIndicator, 'itemIndicator')\n\nexport const Item = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.ItemBaseProps>\n>(TreeView.Item, 'item')\n\nexport const ItemText = withContext<\n  HTMLSpanElement,\n  Assign<HTMLStyledProps<'span'>, TreeView.ItemTextBaseProps>\n>(TreeView.ItemText, 'itemText')\n\nexport const Label = withContext<\n  HTMLLabelElement,\n  Assign<HTMLStyledProps<'label'>, TreeView.LabelBaseProps>\n>(TreeView.Label, 'label')\n\nexport const Tree = withContext<\n  HTMLDivElement,\n  Assign<HTMLStyledProps<'div'>, TreeView.TreeBaseProps>\n>(TreeView.Tree, 'tree')\n\nexport type NodeProviderProps = TreeView.NodeProviderProps<TreeNode>\nexport const NodeProvider = TreeView.NodeProvider\n\nexport { TreeViewContext as Context } from '@ark-ui/react/tree-view'\n"
    },
    {
      "file": "tree-view.tsx",
      "content": "'use client'\nimport { CheckSquareIcon, ChevronRightIcon, FileIcon, FolderIcon } from 'lucide-react'\nimport { forwardRef } from 'react'\nimport * as StyledTreeView from './styled/tree-view'\n\nexport const TreeView = forwardRef<HTMLDivElement, StyledTreeView.RootProps>((props, ref) => {\n  return (\n    <StyledTreeView.Root ref={ref} {...props}>\n      <StyledTreeView.Tree>\n        {/* @ts-expect-error */}\n        {props.collection.rootNode.children.map((node, index) => (\n          <TreeNode key={node.id} node={node} indexPath={[index]} />\n        ))}\n      </StyledTreeView.Tree>\n    </StyledTreeView.Root>\n  )\n})\n\nTreeView.displayName = 'TreeView'\n\nconst TreeNode = (props: StyledTreeView.NodeProviderProps) => {\n  const { node, indexPath } = props\n  return (\n    <StyledTreeView.NodeProvider key={node.id} node={node} indexPath={indexPath}>\n      {node.children ? (\n        <StyledTreeView.Branch>\n          <StyledTreeView.BranchControl>\n            <StyledTreeView.BranchText>\n              <FolderIcon /> {node.name}\n            </StyledTreeView.BranchText>\n            <StyledTreeView.BranchIndicator>\n              <ChevronRightIcon />\n            </StyledTreeView.BranchIndicator>\n          </StyledTreeView.BranchControl>\n          <StyledTreeView.BranchContent>\n            <StyledTreeView.BranchIndentGuide />\n            {/* @ts-expect-error */}\n            {node.children.map((child, index) => (\n              <TreeNode key={child.id} node={child} indexPath={[...indexPath, index]} />\n            ))}\n          </StyledTreeView.BranchContent>\n        </StyledTreeView.Branch>\n      ) : (\n        <StyledTreeView.Item>\n          <StyledTreeView.ItemIndicator>\n            <CheckSquareIcon />\n          </StyledTreeView.ItemIndicator>\n          <StyledTreeView.ItemText>\n            <FileIcon />\n            {node.name}\n          </StyledTreeView.ItemText>\n        </StyledTreeView.Item>\n      )}\n    </StyledTreeView.NodeProvider>\n  )\n}\n"
    }
  ]
}
