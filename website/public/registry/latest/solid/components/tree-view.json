{
  "id": "tree-view",
  "name": "Tree View",
  "variants": [
    {
      "file": "styled/tree-view.tsx",
      "content": "import type { Assign } from '@ark-ui/solid'\nimport { type TreeNode, TreeView } from '@ark-ui/solid/tree-view'\nimport type { ComponentProps } from 'solid-js'\nimport { type TreeViewVariantProps, treeView } from 'styled-system/recipes'\nimport type { HTMLStyledProps } from 'styled-system/types'\nimport { createStyleContext } from './utils/create-style-context'\n\nconst { withProvider, withContext } = createStyleContext(treeView)\n\nexport type RootProviderProps = ComponentProps<typeof RootProvider>\nexport const RootProvider = withProvider<\n  Assign<\n    Assign<HTMLStyledProps<'div'>, TreeView.RootProviderBaseProps<TreeNode>>,\n    TreeViewVariantProps\n  >\n>(TreeView.RootProvider, 'root')\n\nexport type RootProps = ComponentProps<typeof Root>\nexport const Root = withProvider<\n  Assign<Assign<HTMLStyledProps<'div'>, TreeView.RootBaseProps<TreeNode>>, TreeViewVariantProps>\n>(TreeView.Root, 'root')\n\nexport const BranchContent = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchContentBaseProps>\n>(TreeView.BranchContent, 'branchContent')\n\nexport const BranchControl = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchControlBaseProps>\n>(TreeView.BranchControl, 'branchControl')\n\nexport const BranchIndicator = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndicatorBaseProps>\n>(TreeView.BranchIndicator, 'branchIndicator')\n\nexport const Branch = withContext<Assign<HTMLStyledProps<'div'>, TreeView.BranchBaseProps>>(\n  TreeView.Branch,\n  'branch',\n)\n\nexport const BranchIndentGuide = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchIndentGuideBaseProps>\n>(TreeView.BranchIndentGuide, 'branchIndentGuide')\n\nexport const BranchText = withContext<\n  Assign<HTMLStyledProps<'span'>, TreeView.BranchTextBaseProps>\n>(TreeView.BranchText, 'branchText')\n\nexport const BranchTrigger = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.BranchTriggerBaseProps>\n>(TreeView.BranchTrigger, 'branchTrigger')\n\nexport const ItemIndicator = withContext<\n  Assign<HTMLStyledProps<'div'>, TreeView.ItemIndicatorBaseProps>\n>(TreeView.ItemIndicator, 'itemIndicator')\n\nexport const Item = withContext<Assign<HTMLStyledProps<'div'>, TreeView.ItemBaseProps>>(\n  TreeView.Item,\n  'item',\n)\n\nexport const ItemText = withContext<Assign<HTMLStyledProps<'span'>, TreeView.ItemTextBaseProps>>(\n  TreeView.ItemText,\n  'itemText',\n)\n\nexport const Label = withContext<Assign<HTMLStyledProps<'label'>, TreeView.LabelBaseProps>>(\n  TreeView.Label,\n  'label',\n)\n\nexport const Tree = withContext<Assign<HTMLStyledProps<'div'>, TreeView.TreeBaseProps>>(\n  TreeView.Tree,\n  'tree',\n)\n\nexport type NodeProviderProps = TreeView.NodeProviderProps<TreeNode>\nexport const NodeProvider = TreeView.NodeProvider\n\nexport { TreeViewContext as Context } from '@ark-ui/solid'\n"
    },
    {
      "file": "tree-view.tsx",
      "content": "import { CheckSquareIcon, ChevronRightIcon, FileIcon, FolderIcon } from 'lucide-solid'\nimport { For, Show } from 'solid-js'\nimport * as StyledTreeView from './styled/tree-view'\n\nexport const TreeView = (props: StyledTreeView.RootProps) => {\n  return (\n    <StyledTreeView.Root {...props}>\n      <StyledTreeView.Tree>\n        <For each={props.collection.rootNode.children}>\n          {(node, index) => <TreeNode node={node} indexPath={[index()]} />}\n        </For>\n      </StyledTreeView.Tree>\n    </StyledTreeView.Root>\n  )\n}\n\nconst TreeNode = (props: StyledTreeView.NodeProviderProps) => {\n  const { node, indexPath } = props\n  return (\n    <StyledTreeView.NodeProvider node={node} indexPath={indexPath}>\n      <Show\n        when={node.children}\n        fallback={\n          <StyledTreeView.Item>\n            <StyledTreeView.ItemIndicator>\n              <CheckSquareIcon />\n            </StyledTreeView.ItemIndicator>\n            <StyledTreeView.ItemText>\n              <FileIcon />\n              {node.name}\n            </StyledTreeView.ItemText>\n          </StyledTreeView.Item>\n        }\n      >\n        <StyledTreeView.Branch>\n          <StyledTreeView.BranchControl>\n            <StyledTreeView.BranchText>\n              <FolderIcon /> {node.name}\n            </StyledTreeView.BranchText>\n            <StyledTreeView.BranchIndicator>\n              <ChevronRightIcon />\n            </StyledTreeView.BranchIndicator>\n          </StyledTreeView.BranchControl>\n          <StyledTreeView.BranchContent>\n            <StyledTreeView.BranchIndentGuide />\n            <For each={node.children}>\n              {(child, index) => <TreeNode node={child} indexPath={[...indexPath, index()]} />}\n            </For>\n          </StyledTreeView.BranchContent>\n        </StyledTreeView.Branch>\n      </Show>\n    </StyledTreeView.NodeProvider>\n  )\n}\n"
    }
  ]
}
